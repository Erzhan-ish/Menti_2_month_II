class Distance:                                     # –û–±—ä—è–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è.

    # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –º–µ—Ç—Ä—ã
    _units_to_meters = {                            # –ê—Ç—Ä–∏–±—É—Ç –ö–õ–ê–°–°–ê (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤):
        "cm": 0.01,                                 # 1 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä = 0.01 –º–µ—Ç—Ä–∞
        "m": 1,                                     # 1 –º–µ—Ç—Ä = 1 –º–µ—Ç—Ä (–±–∞–∑–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞)
        "km": 1000                                  # 1 –∫–∏–ª–æ–º–µ—Ç—Ä = 1000 –º–µ—Ç—Ä–æ–≤
    }

    def __init__(self, value: float, unit: str = "m"):   # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä–æ–∫—É-–µ–¥–∏–Ω–∏—Ü—É
        if unit not in self._units_to_meters:
            raise ValueError(f"Unsupported unit: {unit}")
        self.value = value
        self.unit = unit

    def __str__(self):                                   # –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –ø–µ—á–∞—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ (print, f-string –∏ —Ç.–ø.).
        return f"{self.value} {self.unit}"               # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "12.5 km".

    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–µ—Ç—Ä—ã
    def to_meters(self):                                 # –ú–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä—ã.
        return self.value * self._units_to_meters[self.unit]   # –£–º–Ω–æ–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –µ–≥–æ –µ–¥–∏–Ω–∏—Ü—ã.

    # —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –≤ –ª—é–±—É—é –µ–¥–∏–Ω–∏—Ü—É
    @staticmethod
    def convert(value_in_meters, unit):                  # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥: –Ω–µ –Ω—É–∂–µ–Ω self; —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —á–∏—Å–ª–∞–º–∏ –∏ —Å—Ç—Ä–æ–∫–æ–π-–µ–¥–∏–Ω–∏—Ü–µ–π.
        if unit not in Distance._units_to_meters:        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
            raise ValueError(f"Unsupported unit: {unit}")# –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
        return value_in_meters / Distance._units_to_meters[unit] # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ —Ç—Ä–µ–±—É–µ–º—É—é –µ–¥–∏–Ω–∏—Ü—É (–¥–µ–ª–∏–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç).

    def __add__(self, other):                            # –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ —Å–ª–æ–∂–µ–Ω–∏—è: a + b.
        if not isinstance(other, Distance):              # –°–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ Distance.
            return NotImplemented                        # –°–æ–æ–±—â–∞–µ–º Python, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.
        # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –º–µ—Ç—Ä–∞–º
        total_meters = self.to_meters() + other.to_meters()   # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –º–µ—Ç—Ä—ã –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º.
        # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö self
        return Distance(self.convert(total_meters, self.unit), self.unit)  # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞—ë–º –≤ —Ç–æ–π –∂–µ –µ–¥–∏–Ω–∏—Ü–µ, —á—Ç–æ –∏ —É self.

    def __sub__(self, other):                            # –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –≤—ã—á–∏—Ç–∞–Ω–∏—è: a - b.
        if not isinstance(other, Distance):              # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ Distance.
            return NotImplemented
        total_meters = self.to_meters() - other.to_meters()   # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ—Ç—Ä—ã –∏ –≤—ã—á–∏—Ç–∞–µ–º.

        # –¥–æ–ø –∑–∞–¥–∞–Ω–∏–µ: –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if total_meters < 0:                             # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–Ω—å—à–µ –Ω—É–ª—è (—Ñ–∏–∑–∏—á–µ—Å–∫–∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏),
            raise ValueError("Resulting distance cannot be negative")  # –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.

        return Distance(self.convert(total_meters, self.unit), self.unit)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π Distance –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö self.

    # üîπ –º–µ—Ç–æ–¥—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–¥–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 2)
    def __eq__(self, other):                             # == : —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        return self.to_meters() == other.to_meters()     # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –º–µ—Ç—Ä–∞—Ö (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü).

    def __lt__(self, other):                             # < : –º–µ–Ω—å—à–µ
        return self.to_meters() < other.to_meters()      # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–∂–µ —á–µ—Ä–µ–∑ –º–µ—Ç—Ä—ã.

    def __le__(self, other):                             # <= : –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
        return self.to_meters() <= other.to_meters()

    def __gt__(self, other):                             # > : –±–æ–ª—å—à–µ
        return self.to_meters() > other.to_meters()

    def __ge__(self, other):                             # >= : –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
        return self.to_meters() >= other.to_meters()

